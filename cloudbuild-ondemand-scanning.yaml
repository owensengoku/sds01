steps:
# integration tests app with Maven
- name: maven:3.8.7-eclipse-temurin-17-alpine
  entrypoint: mvn
  args: ["verify"]
# build app with Maven
- name: maven:3.8.7-eclipse-temurin-17-alpine
  entrypoint: mvn
  args: ["package", "-Dmaven.test.skip=true"]
# Lint Dockerfile
- name: gcr.io/cloud-builders/docker
  id: 'Linting Dockerfile for Static Analysis'
  entrypoint: bash
  args:
    - '-c'
    - |
      docker run --rm -v $(pwd):/root -i hadolint/hadolint hadolint -f json --config /root/policies/hadolint.yaml /root/Dockerfile > res.txt ; \
      if [[ $(cat res.txt | wc -c) -gt 2 ]] ; then echo 'Static Analysis failed' && cat res.txt && exit 1; else echo 'Linting passed'; fi
# Build Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '.', '-f', 'Dockerfile-vulnerable', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_APP_NAME}:${_TEMP_TAG}']
- id: scan
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    (gcloud artifacts docker images scan \
    us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_APP_NAME}:${_TEMP_TAG} \
    --location us \
    --format="value(response.scan)") > /workspace/scan_id.txt
 # Push the container image to Artifact Registry, get sha256 of the image
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq CRITICAL; \
    then echo "Failed vulnerability check for CRITICAL level" && exit 1; else echo "No CRITICAL vulnerability found, congrats !" && exit 0; fi
  id: "severity check"
#Retag
- id: "retag"
  name: 'gcr.io/cloud-builders/docker'
  args: ['tag',  'us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_APP_NAME}:${_TEMP_TAG}', 'us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_APP_NAME}:${_STABLE_TAG}']
#pushing to artifact registry
- id: "push"
  name: 'gcr.io/cloud-builders/docker'
  args: ['push',  'us-central1-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_APP_NAME}:${_STABLE_TAG}']
images: 
- us-central1-docker.pkg.dev/$PROJECT_ID/${_REPO_NAME}/${_APP_NAME}
substitutions:
  _REPO_NAME: container-dev-repo
  _APP_NAME: hello-world
  _TEMP_TAG: temp
  _STABLE_TAG: good
